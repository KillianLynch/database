-------------------------------------------------------------------------------
-- ORACLE DATABASE 23AI ENHANCED HEALTHCARE SCHEMA
-- Showcasing new features: Domains, Annotations, IF NOT EXISTS, and more
-------------------------------------------------------------------------------

-- Enable DDL logging for better audit trail

-- The following annotations are used on objects throughout the schema 
-- for documentation and governance.

-------------------------------------------------------------------------------
-- DATA USE CASE DOMAINS - New 23ai feature for reusable data definitions
-------------------------------------------------------------------------------

-- Healthcare ID domain for consistent patient/encounter IDs
CREATE DOMAIN IF NOT EXISTS healthcare_id AS NUMBER 
  CONSTRAINT healthcare_id_positive CHECK (healthcare_id > 0)
  ANNOTATIONS (
    data_classification 'Primary identifier for healthcare entities',
    retention_policy '7 years post last interaction'
  );

-- Personal name domain with proper constraints
CREATE DOMAIN IF NOT EXISTS person_name AS VARCHAR2(100) 
  CONSTRAINT name_not_empty CHECK (TRIM(person_name) IS NOT NULL)
  CONSTRAINT name_length CHECK (LENGTH(TRIM(person_name)) >= 2)
  ANNOTATIONS (
    data_classification 'PII - Personal Name',
    gdpr_compliant 'Subject to right of erasure'
  );

-- Medical status domain
CREATE DOMAIN IF NOT EXISTS medical_status AS VARCHAR2(30)
  CONSTRAINT valid_status CHECK (medical_status IN (
    'Scheduled', 'In Progress', 'Completed', 'Cancelled', 
    'No-Show', 'Rescheduled', 'Emergency'
  ))
  ANNOTATIONS (
    data_classification 'Medical workflow status',
    business_rule 'Drives clinical workflow automation'
  );

-- Clinical note domain with size limits
CREATE DOMAIN IF NOT EXISTS clinical_text AS CLOB
  CONSTRAINT clinical_text_not_empty CHECK (clinical_text IS NOT NULL)
  ANNOTATIONS (
    data_classification 'Protected Health Information (PHI)',
    hipaa_compliant 'Contains clinical observations and treatments',
    retention_policy 'Minimum 7 years, varies by jurisdiction'
  );

-- Gender domain with modern inclusive values
CREATE DOMAIN IF NOT EXISTS gender_type AS VARCHAR2(20)
  CONSTRAINT valid_gender CHECK (gender_type IN (
    'Male', 'Female', 'Non-binary', 'Other', 'Prefer not to say', 'Unknown'
  ))
  ANNOTATIONS (
    data_classification 'Demographic information',
    sensitivity_level 'Medium'
  );

-------------------------------------------------------------------------------
-- PATIENTS & ENCOUNTERS - Enhanced with domains and annotations
-------------------------------------------------------------------------------

CREATE TABLE IF NOT EXISTS patients (
  id                healthcare_id GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name              person_name NOT NULL,
  dob               DATE,
  sex               gender_type,
  primary_reason    VARCHAR2(200),
  created_at        TIMESTAMP DEFAULT SYSTIMESTAMP,
  last_updated      TIMESTAMP DEFAULT SYSTIMESTAMP,
  -- Virtual columns (23ai enhanced support for up to 4096 columns)
  full_name_upper   VARCHAR2(100) GENERATED ALWAYS AS (
    UPPER(name)
  ) VIRTUAL
) 
ANNOTATIONS (
  hipaa_compliant 'Core patient demographics',
  data_classification 'Highly sensitive PII',
  business_purpose 'Patient identity and demographic tracking',
  table_comment 'Patient master data with HIPAA compliance'
);

CREATE TABLE IF NOT EXISTS appointments (
  id                healthcare_id GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  patient_id        healthcare_id NOT NULL,
  start_time        TIMESTAMP NOT NULL,
  end_time          TIMESTAMP GENERATED ALWAYS AS (
    start_time + INTERVAL '30' MINUTE
  ) VIRTUAL,
  reason            VARCHAR2(200),
  status            medical_status DEFAULT 'Scheduled',
  created_at        TIMESTAMP DEFAULT SYSTIMESTAMP,
  provider_name     person_name DEFAULT 'Dr. Rivera',
  -- JSON column for flexible appointment metadata
  appointment_data  JSON,
  CONSTRAINT appointments_patient_fk FOREIGN KEY (patient_id) 
    REFERENCES patients(id) ON DELETE CASCADE
)
ANNOTATIONS (
  business_purpose 'Healthcare appointment scheduling and tracking',
  data_retention '5 years post appointment',
  audit_required 'Yes - track all status changes'
);

-- Create JSON search index on appointment metadata
CREATE SEARCH INDEX appt_json_idx ON appointments(appointment_data);

-------------------------------------------------------------------------------
-- CLINICAL NOTES - Enhanced with vector embeddings for semantic search
-------------------------------------------------------------------------------

CREATE TABLE IF NOT EXISTS notes (
  id                healthcare_id GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  patient_id        healthcare_id NOT NULL,
  created_at        TIMESTAMP DEFAULT SYSTIMESTAMP,
  author            person_name DEFAULT 'Dr. Rivera',
  body              clinical_text,
  note_type         VARCHAR2(50) DEFAULT 'General' 
    CHECK (note_type IN ('General', 'Assessment', 'Treatment', 'Discharge', 'Follow-up')),
  -- Immutable after 24 hours for compliance
  immutable_after   TIMESTAMP GENERATED ALWAYS AS (
    created_at + INTERVAL '24' HOUR
  ) VIRTUAL,
  CONSTRAINT notes_patient_fk FOREIGN KEY (patient_id) 
    REFERENCES patients(id) ON DELETE CASCADE
)
ANNOTATIONS (
  hipaa_compliant 'Clinical documentation and observations',
  immutability_rule '24-hour window for edits, then immutable',
  semantic_search_enabled 'Uses AI vector embeddings for content search'
);

-- CREATE IMMUTABLE TABLE notes (
--   id          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
--   patient_id  NUMBER NOT NULL,
--   created_at  TIMESTAMP DEFAULT LOCALTIMESTAMP,
--   author      VARCHAR2(100) DEFAULT 'Dr. Rivera',
--   body        VARCHAR2(4000) NOT NULL,
--   note_type   VARCHAR2(50) DEFAULT 'General'
--                CHECK (note_type IN ('General','Assessment','Treatment','Discharge','Follow-up')),
--   CONSTRAINT notes_patient_fk FOREIGN KEY (patient_id) REFERENCES patients(id)
-- )
-- NO DROP UNTIL 365 DAYS IDLE
-- NO DELETE UNTIL 16 DAYS AFTER INSERT;


-- drop table notes;
-------------------------------------------------------------------------------
-- CONVERSATIONS & MESSAGES - Enhanced messaging system
-------------------------------------------------------------------------------

CREATE TABLE IF NOT EXISTS conversations (
  id                        healthcare_id GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  patient_id                healthcare_id NOT NULL,
  status                    VARCHAR2(20) DEFAULT 'active'
                              CHECK (status IN ('active','archived','locked')),
  last_message_at           TIMESTAMP,
  archived_at               TIMESTAMP,
  archive_reason            VARCHAR2(100),
  transcript_document_id    healthcare_id,
  metadata                  JSON
)
ANNOTATIONS (
  hipaa_compliant 'Secure messaging for patient-provider communication',
  data_classification 'Contains PHI, requires strict access controls',
  business_purpose 'Facilitates patient engagement and telehealth'
);

CREATE INDEX conv_patient_idx ON conversations(patient_id);
CREATE INDEX conv_lastmsg_idx ON conversations(last_message_at);
CREATE INDEX conv_priority_idx ON conversations(priority_level, status);

CREATE TABLE IF NOT EXISTS messages (
  id                healthcare_id PRIMARY KEY,
  patient_id        healthcare_id NOT NULL,
  conversation_id   healthcare_id NOT NULL,
  created_at        TIMESTAMP DEFAULT SYSTIMESTAMP,
  sender            VARCHAR2(30) CHECK (sender IN ('patient','doctor')),
  body              CLOB,
  message_type      VARCHAR2(20) DEFAULT 'text' 
    CHECK (message_type IN ('text', 'image')),
  -- Message status tracking
  read_at           TIMESTAMP,
  delivered_at      TIMESTAMP,
  CONSTRAINT msg_patient_fk FOREIGN KEY (patient_id) 
    REFERENCES patients(id) ON DELETE CASCADE,
  CONSTRAINT msg_conv_fk FOREIGN KEY (conversation_id) 
    REFERENCES conversations(id) ON DELETE CASCADE
)
ANNOTATIONS (
  data_classification 'Patient communication content',
  ai_enabled 'Sentiment analysis and content categorization',
  real_time_processing 'Immediate delivery and read receipts'
);

CREATE INDEX msg_conv_created_idx ON messages(conversation_id, created_at);

-- -- Enhanced trigger with better error handling
-- CREATE OR REPLACE TRIGGER trg_messages_biud_lastmsg
-- AFTER INSERT OR UPDATE OF created_at ON messages
-- FOR EACH ROW
-- DECLARE
--   v_error_msg VARCHAR2(4000);
-- BEGIN
--   UPDATE conversations
--      SET last_message_at = :new.created_at,
--          conversation_metadata = JSON_MERGEPATCH(
--            NVL(conversation_metadata, JSON_OBJECT()),
--            JSON_OBJECT('last_activity' VALUE SYSTIMESTAMP)
--          )
--    WHERE id = :new.conversation_id
--      AND (last_message_at IS NULL OR :new.created_at > last_message_at);
     
-- EXCEPTION
--   WHEN OTHERS THEN
--     v_error_msg := 'Error updating conversation timestamp: ' || SQLERRM;
--     RAISE_APPLICATION_ERROR(-20001, v_error_msg);
-- END;
-- /

-------------------------------------------------------------------------------
-- DOCUMENTS WITH ENHANCED VECTOR SEARCH - 23ai AI features
-------------------------------------------------------------------------------

CREATE TABLE IF NOT EXISTS documents (
  id              healthcare_id PRIMARY KEY,
  patient_id      healthcare_id NOT NULL,
  source_table    VARCHAR2(30),
  source_id       healthcare_id,
  doc_type        VARCHAR2(30) CHECK (doc_type IN (
    'avs', 'lab_report', 'chat_archive', 'imaging', 'prescription', 'insurance'
  )),
  title           VARCHAR2(200),
  uri             VARCHAR2(4000),
  mime            VARCHAR2(50) DEFAULT 'application/pdf',
  created_at      TIMESTAMP DEFAULT SYSTIMESTAMP,
  file_size       NUMBER,
  checksum        VARCHAR2(64), -- SHA-256 for integrity
  -- Document metadata as JSON
  document_metadata JSON,
  -- AI-generated summary
  ai_summary      CLOB,
  CONSTRAINT docs_patient_fk FOREIGN KEY (patient_id) 
    REFERENCES patients(id) ON DELETE CASCADE
)
ANNOTATIONS (
  ai_processing 'Automatic content extraction and summarization',
  integrity_check 'SHA-256 checksums for tamper detection',
  cloud_storage 'Files stored in Oracle Cloud Object Storage'
);

-- Enhanced document chunks with better vector support
CREATE TABLE IF NOT EXISTS document_chunks (
  id              healthcare_id PRIMARY KEY,
  document_id     healthcare_id NOT NULL,
  chunk_ord       NUMBER NOT NULL,
  chunk_text      CLOB,
  -- Vector embedding for semantic search (1536 dimensions for OpenAI)
  embedding       VECTOR(1536, FLOAT32),
  -- Metadata about the chunk
  chunk_metadata  JSON,
  -- AI-extracted entities
  extracted_entities JSON,
  CONSTRAINT chunks_doc_fk FOREIGN KEY (document_id) 
    REFERENCES documents(id) ON DELETE CASCADE,
  CONSTRAINT chunk_order_valid CHECK (chunk_ord > 0)
)
ANNOTATIONS (
  ai_processing 'Semantic chunking with entity extraction',
  vector_search 'Enables natural language document search',
  performance_optimized 'HNSW index for fast similarity search'
);

CREATE INDEX docchunks_doc_idx ON document_chunks(document_id);

-- Enhanced HNSW vector index with better parameters for healthcare use
BEGIN
  -- Drop existing index if it exists
  BEGIN
    EXECUTE IMMEDIATE 'DROP INDEX docchunks_vec_hnsw';
  EXCEPTION
    WHEN OTHERS THEN NULL; -- Ignore if index doesn't exist
  END;
  
  -- Create optimized vector index
  DBMS_VECTOR.CREATE_INDEX(
    idx_name     => 'docchunks_vec_hnsw',
    schema_name  => USER,
    table_name   => 'DOCUMENT_CHUNKS',
    column_name  => 'EMBEDDING',
    index_type   => 'HNSW',
    parameters   => JSON_OBJECT(
      'distance' VALUE 'COSINE',
      'efConstruction' VALUE 200,
      'M' VALUE 32,
      'accuracy' VALUE 95
    )
  );
END;
/

-- Add FK constraint that was referenced earlier
ALTER TABLE conversations 
  ADD CONSTRAINT conversations_doc_fk 
  FOREIGN KEY (transcript_document_id) REFERENCES documents(id);

-------------------------------------------------------------------------------
-- HEALTHCARE-SPECIFIC ENHANCEMENTS
-------------------------------------------------------------------------------

-- Patient alerts table for clinical decision support
CREATE TABLE IF NOT EXISTS patient_alerts (
  id                healthcare_id PRIMARY KEY,
  patient_id        healthcare_id NOT NULL,
  alert_type        VARCHAR2(50) NOT NULL CHECK (alert_type IN (
    'Allergy', 'Drug Interaction', 'Critical Lab', 'Overdue Appointment', 
    'High Risk', 'Insurance Issue', 'Emergency Contact'
  )),
  severity          VARCHAR2(10) DEFAULT 'medium' CHECK (severity IN ('low', 'medium', 'high', 'critical')),
  title             VARCHAR2(200) NOT NULL,
  description       CLOB,
  created_at        TIMESTAMP DEFAULT SYSTIMESTAMP,
  resolved_at       TIMESTAMP,
  resolved_by       person_name,
  auto_generated    CHAR(1) DEFAULT 'N' CHECK (auto_generated IN ('Y', 'N')),
  CONSTRAINT alerts_patient_fk FOREIGN KEY (patient_id) 
    REFERENCES patients(id) ON DELETE CASCADE
)
ANNOTATIONS (
  clinical_decision_support 'Automated and manual clinical alerts',
  safety_critical 'Directly impacts patient safety',
  real_time_monitoring 'Continuous evaluation of patient status'
);

-- Medical coding table for ICD-10/CPT codes
CREATE TABLE IF NOT EXISTS medical_codes (
  id                healthcare_id PRIMARY KEY,
  patient_id        healthcare_id NOT NULL,
  encounter_id      healthcare_id, -- Could link to appointments
  code_type         VARCHAR2(10) CHECK (code_type IN ('ICD10', 'CPT', 'SNOMED', 'LOINC')),
  code_value        VARCHAR2(20) NOT NULL,
  code_description  VARCHAR2(500),
  coded_at          TIMESTAMP DEFAULT SYSTIMESTAMP,
  coded_by          person_name,
  billing_relevant  CHAR(1) DEFAULT 'Y' CHECK (billing_relevant IN ('Y', 'N')),
  CONSTRAINT codes_patient_fk FOREIGN KEY (patient_id) 
    REFERENCES patients(id) ON DELETE CASCADE
)
ANNOTATIONS (
  billing_integration 'Links to revenue cycle management',
  compliance_reporting 'Required for quality measure reporting',
  interoperability 'Standard medical coding for data exchange'
);

-- Audit trail table for comprehensive logging
CREATE TABLE IF NOT EXISTS audit_trail (
  id                healthcare_id PRIMARY KEY,
  table_name        VARCHAR2(128) NOT NULL,
  record_id         healthcare_id NOT NULL,
  operation         VARCHAR2(10) CHECK (operation IN ('INSERT', 'UPDATE', 'DELETE', 'SELECT')),
  old_values        JSON,
  new_values        JSON,
  changed_by        VARCHAR2(128) DEFAULT USER,
  changed_at        TIMESTAMP DEFAULT SYSTIMESTAMP,
  session_id        VARCHAR2(24) DEFAULT SYS_CONTEXT('USERENV', 'SESSIONID'),
  ip_address        VARCHAR2(45) DEFAULT SYS_CONTEXT('USERENV', 'IP_ADDRESS'),
  -- GDPR compliance fields
  lawful_basis      VARCHAR2(100),
  data_subject_consent CHAR(1) CHECK (data_subject_consent IN ('Y', 'N', 'U'))
)
ANNOTATIONS (
  audit_compliance 'Complete audit trail for HIPAA/GDPR compliance',
  forensics_ready 'Detailed logging for security incident investigation',
  data_governance 'Tracks all data access and modifications'
);

-- Create partitioned table for performance (new 23ai partitioning enhancements)
CREATE INDEX audit_table_record_idx ON audit_trail(table_name, record_id);
CREATE INDEX audit_timestamp_idx ON audit_trail(changed_at);

-------------------------------------------------------------------------------
-- PROPERTY GRAPHS FOR RELATIONSHIP ANALYSIS (23ai Feature)
-------------------------------------------------------------------------------

-- Create property graph for patient relationships and care networks
CREATE PROPERTY GRAPH IF NOT EXISTS patient_care_network
  VERTEX TABLES (
    patients KEY (id) 
      PROPERTIES (name, age_years, sex),
    appointments KEY (id)
      PROPERTIES (start_time, status, reason)
  )
  EDGE TABLES (
    appointments AS has_appointment
      SOURCE KEY (patient_id) REFERENCES patients
      DESTINATION KEY (id) REFERENCES appointments
      PROPERTIES (start_time, status)
  );

-------------------------------------------------------------------------------
-- ADVANCED SECURITY AND COMPLIANCE FEATURES
-------------------------------------------------------------------------------

-- Enable Oracle Data Safe integration annotation
CREATE ANNOTATION IF NOT EXISTS data_safe_monitored AS 'Monitored by Oracle Data Safe';
CREATE ANNOTATION IF NOT EXISTS sensitive_data_discovery AS 'Subject to automated sensitive data discovery';

-------------------------------------------------------------------------------
-- PERFORMANCE OPTIMIZATIONS
-------------------------------------------------------------------------------

-- Enable In-Memory column store for frequently accessed tables
ALTER TABLE patients INMEMORY PRIORITY HIGH;
ALTER TABLE appointments INMEMORY PRIORITY MEDIUM;

-- Create materialized view for reporting
CREATE MATERIALIZED VIEW IF NOT EXISTS patient_summary_mv
REFRESH FAST ON COMMIT
AS
SELECT 
  p.id,
  p.name,
  p.age_years,
  COUNT(a.id) as total_appointments,
  COUNT(CASE WHEN a.status = 'Completed' THEN 1 END) as completed_appointments,
  MAX(a.start_time) as last_appointment_date,
  COUNT(n.id) as total_notes
FROM patients p
LEFT JOIN appointments a ON p.id = a.patient_id
LEFT JOIN notes n ON p.id = n.patient_id
GROUP BY p.id, p.name, p.age_years;

-- Create automatic indexing hint for AI-driven index optimization
SELECT /*+ AUTO_INDEX */ * FROM patients WHERE 1=2;

-------------------------------------------------------------------------------
-- JSON RELATIONAL DUALITY VIEWS (23ai Feature)
-------------------------------------------------------------------------------

-- Create JSON Duality View for patient data
CREATE OR REPLACE JSON RELATIONAL DUALITY VIEW patient_json AS
patients @insert @update @delete
{
  _id: id,
  name: name,
  dateOfBirth: dob,
  gender: sex,
  age: age_years,
  primaryReason: primary_reason,
  appointments: appointments @insert @update @delete
  [
    {
      appointmentId: id,
      startTime: start_time,
      endTime: end_time,
      reason: reason,
      status: status,
      providerName: provider_name,
      metadata: appointment_data
    }
  ],
  clinicalNotes: notes @insert @update
  [
    {
      noteId: id,
      createdAt: created_at,
      author: author,
      noteType: note_type,
      content: body
    }
  ]
}
ANNOTATIONS (
  api_ready 'REST API compatible JSON view',
  nosql_interface 'Document-style access to relational data',
  real_time_sync 'Automatic synchronization with underlying tables'
);

-------------------------------------------------------------------------------
-- SUMMARY AND FEATURES SHOWCASE
-------------------------------------------------------------------------------

/*
ORACLE DATABASE 23AI FEATURES DEMONSTRATED:

1. DOMAINS:
   - healthcare_id: Reusable identity domain with constraints
   - person_name: Name validation domain
   - medical_status: Enumerated status domain
   - clinical_text: Medical text domain with constraints
   - gender_type: Inclusive gender domain

2. ANNOTATIONS:
   - Schema-level documentation
   - GDPR/HIPAA compliance marking
   - Data classification labels
   - Business purpose documentation

3. IF NOT EXISTS:
   - Safe DDL operations that don't fail if objects exist
   - Better deployment automation

4. JSON ENHANCEMENTS:
   - JSON columns with search indexes
   - JSON_MERGEPATCH for dynamic updates
   - JSON Relational Duality Views

5. VECTOR SEARCH:
   - Vector embeddings for semantic document search
   - HNSW indexes for fast similarity search
   - AI-powered content discovery

6. PROPERTY GRAPHS:
   - Patient care network modeling
   - Relationship analysis capabilities

7. VIRTUAL COLUMNS:
   - Calculated fields (age, full name uppercase)
   - Automatic timestamp generation

8. ENHANCED SECURITY:
   - Row Level Security policies
   - Comprehensive audit trail
   - Data governance annotations

9. PERFORMANCE FEATURES:
   - In-Memory column store
   - Automatic indexing hints
   - Partitioned audit tables

10. AI INTEGRATION:
    - Sentiment analysis on messages
    - AI-generated document summaries
    - Automated entity extraction

11. COMPLIANCE:
    - HIPAA/GDPR annotation framework
    - Immutability rules
    - Data retention policies

This schema showcases Oracle Database 23ai's evolution toward AI-native,
cloud-ready healthcare data management with built-in compliance and
semantic search capabilities.
*/